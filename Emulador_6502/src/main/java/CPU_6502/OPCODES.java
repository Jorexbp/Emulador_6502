package CPU_6502;

import Excepciones.Excepcion_Instruccion;

public enum OPCODES {

	// LDA OPCODES
	INS_LDA_IM(0xA9), INS_LDA_ZP(0xA5), INS_LDA_ZX(0xB5), INS_LDA_AB(0xAD), INS_LDA_AX(0xBD), INS_LDA_AY(0xB9),
	INS_LDA_IX(0xA1), INS_LDA_IY(0xB1),

	// LDX OPCODES
	INS_LDX_IM(0xA2), INS_LDX_ZP(0xA6), INS_LDX_ZPY(0xB6), INS_LDX_AB(0xAE), INS_LDX_ABY(0xBE),

	// LDY OPCODES
	INS_LDY_IM(0xA0), INS_LDY_ZP(0xA4), INS_LDY_ZPX(0xB4), INS_LDY_AB(0xAC), INS_LDY_ABX(0xBC),

	// STA OPCODES
	INS_STA_ZP(0x85), INS_STA_ZPX(0x95), INS_STA_AB(0x8D), INS_STA_ABX(0x9D), INS_STA_ABY(0x99), INS_STA_INX(0x81),
	INS_STA_INY(0x91),

	// STX OPCODES
	INS_STX_ZP(0x86), INS_STX_ZPY(0x96), INS_STX_AB(0x8E),

	// STX OPCODES
	INS_STY_ZP(0x84), INS_STY_ZPX(0x94), INS_STY_AB(0x8C),

	// TAX OPCODE
	INS_TAX_IP(0xAA),

	// TAY OPCODE
	INS_TAY_IP(0xA8),

	// TXA OPCODE
	INS_TXA_IP(0x8A),

	// TYA OPCODE
	INS_TYA_IP(0x98),

	INS_JSR(0x20), INS_RTS(0x60),

	INS_JMP_AB(0x4C), INS_JMP_IN(0x6C),

	// STACK OPERATIONS
	INS_TSX_IM(0xBA), INS_TXS_IM(0x9A), INS_PHA_IM(0x48), INS_PHP_IM(0x08), INS_PLA_IM(0x68), INS_PLP_IM(0x28),

	// LOGICAL OPERATORS
	// AND
	INS_AND_IM(0x29), INS_AND_ZP(0x25), INS_AND_ZPX(0x35), INS_AND_AB(0x2D), INS_AND_ABX(0x3D), INS_AND_ABY(0x39),
	INS_AND_INX(0x21), INS_AND_INY(0x31),
	// OR EXCLUSIVO
	INS_EOR_IM(0x49), INS_EOR_ZP(0x45), INS_EOR_ZPX(0x55), INS_EOR_AB(0x4D), INS_EOR_ABX(0x5D), INS_EOR_ABY(0x59),
	INS_EOR_INX(0x41), INS_EOR_INY(0x51),
	// OR INCLUSIVO
	INS_ORA_IM(0x09), INS_ORA_ZP(0x05), INS_ORA_ZPX(0x15), INS_ORA_AB(0x0D), INS_ORA_ABX(0x1D), INS_ORA_ABY(0x19),
	INS_ORA_INX(0x01), INS_ORA_INY(0x11),
	// BIT TEST
	INS_BIT_ZP(0x24), INS_BIT_AB(0x2C),

	// CAMBIOS DE LAS FLAGS
	INS_CLC_IM(0x18), INS_CLD_IM(0xD8), INS_CLI_IM(0x58), INS_CLV_IM(0xB8), INS_SEC_IM(0x38), INS_SED_IM(0xF8),
	INS_SEI_IM(0x78),

	// ARITMÃ‰TICAS
	// ADC
	INS_ADC_IM(0x69), INS_ADC_ZP(0x65), INS_ADC_ZPX(0x75), INS_ADC_AB(0x6D), INS_ADC_ABX(0x7D), INS_ADC_ABY(0x79),
	INS_ADC_INX(0x61), INS_ADC_INY(0x71),
	// SBC
	INS_SBC_IM(0xE9), INS_SBC_ZP(0xE5), INS_SBC_ZPX(0xF5), INS_SBC_AB(0xED), INS_SBC_ABX(0xFD), INS_SBC_ABY(0xF9),
	INS_SBC_INX(0xE1), INS_SBC_INY(0xF1),
	// CMP
	INS_CMP_IM(0xC9), INS_CMP_ZP(0xC5), INS_CMP_ZPX(0xD5), INS_CMP_AB(0xCD), INS_CMP_ABX(0xDD), INS_CMP_ABY(0xD9),
	INS_CMP_INX(0xC1), INS_CMP_INY(0xD1),
	// CPX
	INS_CPX_IM(0xE0), INS_CPX_ZP(0xE4), INS_CPX_AB(0xEC),
	// CPY
	INS_CPY_IM(0xC0), INS_CPY_ZP(0xC4), INS_CPY_AB(0xCC),

	// INCREMENTOS Y DECREMENTOS
	// INC
	INS_INC_ZP(0xE6), INS_INC_ZPX(0xF6), INS_INC_AB(0xEE), INS_INC_ABX(0xFE),
	// INX
	INS_INX_IP(0xE8),
	// INY
	INS_INY_IP(0xC8),
	// DEC
	INS_DEC_ZP(0xC6), INS_DEC_ZPX(0xD6), INS_DEC_AB(0xCE), INS_DEC_ABX(0xDE),
	// DEX
	INS_DEX_IP(0xCA),
	// DEY
	INS_DEY_IP(0x88),

	// SHIFTS
	// ASL
	INS_ASL_AC(0x0A), INS_ASL_ZP(0x06), INS_ASL_ZPX(0x16), INS_ASL_AB(0x0E), INS_ASL_ABX(0x1E),
	// LSR
	INS_LSR_AC(0x4A), INS_LSR_ZP(0x46), INS_LSR_ZPX(0x56), INS_LSR_AB(0x4E), INS_LSR_ABX(0x5E),
	// ROL
	INS_ROL_AC(0x2A), INS_ROL_ZP(0x26), INS_ROL_ZPX(0x36), INS_ROL_AB(0x2E), INS_ROL_ABX(0x3E),
	// ROR
	INS_ROR_AC(0x6A), INS_ROR_ZP(0x66), INS_ROR_ZPX(0x76), INS_ROR_AB(0x6E), INS_ROR_ABX(0x7E),

	// BRANCHES

	INS_BCC_RL(0X90), INS_BCS_RL(0XB0), INS_BEQ_RL(0XF0), INS_BMI_RL(0X30), INS_BNE_RL(0XD0), INS_BPL_RL(0X10),
	INS_BVC_RL(0X50), INS_BVS_RL(0X70),

	// SYSTEM FUNCTIONS
	INS_BRK_IM(0x00), INS_NOP_IM(0xEA), INS_RTI_IM(0x40);

	public final int opcodeValue;

	private OPCODES(int opVal) {
		this.opcodeValue = opVal;
	}

	public static OPCODES getOPCODE(int val) throws Excepcion_Instruccion {
		for (OPCODES country : OPCODES.values()) {
			if (country.opcodeValue == val) {
				return country;
			}
		}

		throw new Excepcion_Instruccion(Integer.toString(val), 1);
	}
}
