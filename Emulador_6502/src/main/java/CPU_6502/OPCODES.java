package CPU_6502;

public enum OPCODES {

	// LDA OPCODES
	INS_LDA_IM(0xA9), INS_LDA_ZP(0xA5), INS_LDA_ZX(0xB5), INS_LDA_AB(0xAD), INS_LDA_AX(0xBD), INS_LDA_AY(0xB9),
	INS_LDA_IX(0xA1), INS_LDA_IY(0xB1),

	// LDX OPCODES
	INS_LDX_IM(0xA2), INS_LDX_ZP(0xA6), INS_LDX_ZPY(0xB6), INS_LDX_AB(0xAE), INS_LDX_ABY(0xBE),

	// LDY OPCODES
	INS_LDY_IM(0xA0), INS_LDY_ZP(0xA4), INS_LDY_ZPX(0xB4), INS_LDY_AB(0xAC), INS_LDY_ABX(0xBC),

	// STA OPCODES
	INS_STA_ZP(0x85), INS_STA_ZPX(0x95), INS_STA_AB(0x8D), INS_STA_ABX(0x9D), INS_STA_ABY(0x99), INS_STA_INX(0x81),
	INS_STA_INY(0x91),

	// STX OPCODES
	INS_STX_ZP(0x86), INS_STX_ZPY(0x96), INS_STX_AB(0x8E),

	// STX OPCODES
	INS_STY_ZP(0x84), INS_STY_ZPX(0x94), INS_STY_AB(0x8C),

	// TAX OPCODE
	INS_TAX_IP(0xAA),

	// TAY OPCODE
	INS_TAY_IP(0xA8),

	// TXA OPCODE
	INS_TXA_IP(0x8A),

	// TYA OPCODE
	INS_TYA_IP(0x98),

	INS_JSR(0x20), INS_RTS(0x60),

	INS_JMP_AB(0x4C), INS_JMP_IN(0x6C),

	// STACK OPERATIONS
	INS_TSX_IM(0xBA), INS_TXS_IM(0x9A), INS_PHA_IM(0x48), INS_PHP_IM(0x08), INS_PLA_IM(0x68), INS_PLP_IM(0x28),

	// LOGICAL OPERATORS
	// AND
	INS_AND_IM(0x29), INS_AND_ZP(0x25), INS_AND_ZPX(0x35), INS_AND_AB(0x2D), INS_AND_ABX(0x3D), INS_AND_ABY(0x39),
	INS_AND_INX(0x21), INS_AND_INY(0x31),
	// OR EXCLUSIVO
	INS_EOR_IM(0x49), INS_EOR_ZP(0x45), INS_EOR_ZPX(0x55), INS_EOR_AB(0x4D), INS_EOR_ABX(0x5D), INS_EOR_ABY(0x59),
	INS_EOR_INX(0x41), INS_EOR_INY(0x51),
	// OR INCLUSIVO
	INS_ORA_IM(0x09), INS_ORA_ZP(0x05), INS_ORA_ZPX(0x15), INS_ORA_AB(0x0D), INS_ORA_ABX(0x1D), INS_ORA_ABY(0x19),
	INS_ORA_INX(0x01), INS_ORA_INY(0x11),
	// BIT TEST
	INS_BIT_ZP(0x24), INS_BIT_AB(0x2C),
	
	// CAMBIOS DE LAS FLAGS
	INS_CLC_IM(0x18),INS_CLD_IM(0xD8),INS_CLI_IM(0x58),INS_CLV_IM(0xB8),INS_SEC_IM(0x38),INS_SED_IM(0xF8),INS_SEI_IM(0x78);

	public final int opcodeValue;

	private OPCODES(int opVal) {
		this.opcodeValue = opVal;
	}

	public static OPCODES getOPCODE(int val) {
		for (OPCODES country : OPCODES.values()) {
			if (country.opcodeValue == val) {
				return country;
			}
		}
		
		throw new IllegalArgumentException();
	}
}
